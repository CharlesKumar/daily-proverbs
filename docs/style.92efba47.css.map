{"version":3,"sources":["..\\..\\node_modules\\typesettings\\typesettings\\_typesetted.scss","..\\sass\\style.scss","..\\..\\node_modules\\typesettings\\typesettings\\_mixins.scss","..\\..\\node_modules\\typesettings\\typesettings\\_internal.scss","..\\sass\\partials\\_helpers.scss","..\\..\\node_modules\\include-media\\dist\\_include-media.scss","..\\sass\\partials\\_variables.scss","..\\sass\\partials\\_colors.scss","..\\sass\\partials\\_nav.scss","..\\sass\\partials\\_mixins.scss","..\\sass\\partials\\_base.scss","..\\sass\\partials\\_effects.scss"],"names":[],"mappings":"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","file":"style.92efba47.css","sourceRoot":"..\\src\\templates","sourcesContent":["@if $load-typesetted {\n  //==============================================================================\n  // Default Type Styles\n  //==============================================================================\n\n  // Stops devices from scaling up text.\n  @include typesettingsInit();\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: $font-serif;\n    font-weight: 400;\n    color: $text-color;\n  }\n\n  h1, .h1,\n  h2, .h2,\n  h3, .h3,\n  h4, .h4,\n  h5, .h5,\n  h6, .h6 {\n    margin-top: 0;\n    padding-top: 0;\n    padding-bottom: 0;\n    font-family: $font-sans;\n    font-weight: bold;\n  }\n\n  // [1] Applies a margin bottom that is a multiple of the vertical grid in EMs.\n  // The first argument is the font size context and the second is multiple of the\n  // vertical grid unit.\n  // [2] Sets the type to one of the modular scale values and the second argument\n  // sets a unitless line-height as a multiple of the vertical grid.\n  // [3] A generic media query for tablet size ranges.\n  // [4] Applies a margin bottom that is the same vertical grid value as the mobile\n  // first rule.\n  // [5] Sets the type to one of the modular scale values and the second argument\n  // sets a unitless line-height as a multiple of the vertical grid.\n  h1, .h1 {\n    margin-bottom: emRhythm(1, $ms-up2); // [1]\n    @include setType(6, $ms-up2); // [2]\n\n    @media (min-width: 43.75em) {\n      // [3]\n      margin-bottom: emRhythm(1, $ms-up3); // [4]\n      @include setType(8, $ms-up3); // [5]\n    }\n\n    @media (min-width: 56.25em) {\n      margin-bottom: emRhythm(1, $ms-up4);\n      @include setType(10, $ms-up4);\n    }\n  }\n\n  h2, .h2 {\n    margin-bottom: emRhythm(1, $ms-up1);\n    @include setType(5, $ms-up1);\n\n    @media (min-width: 43.75em) {\n      margin-bottom: emRhythm(1, $ms-up2);\n      @include setType(6, $ms-up2)\n    }\n\n    @media (min-width: 56.25em) {\n      margin-bottom: emRhythm(1, $ms-up3);\n      @include setType(8, $ms-up3);\n    }\n  }\n\n  h3, .h3 {\n    margin-bottom: emRhythm(1, $ms-up1);\n    @include setType(5, $ms-up1);\n\n    @media (min-width: 56.25em) {\n      margin-bottom: emRhythm(1, $ms-up2);\n      @include setType(6, $ms-up2);\n    }\n  }\n\n  h4, .h4 {\n    margin-bottom: emRhythm(1, $ms-up1);\n    @include setType(5, $ms-up1);\n  }\n\n  h5, .h5,\n  h6, .h6 {\n    margin-bottom: emRhythm(1);\n    @include setType(4);\n  }\n\n  p {\n    margin-top: 0;\n    margin-bottom: emRhythm($base-line-multi);\n    padding-top: 0;\n    padding-bottom: 0;\n    max-width: emRhythm(96);\n\n    @media (min-width: 43.75em) {\n      @if $paragraph-justify {\n        text-align: justify;\n      }\n    }\n  }\n\n  @if $paragraph-indent {\n    p + p {\n      margin-top: emRhythm($base-line-multi * -1);\n      text-indent: emRhythm($base-line-multi);\n    }\n  }\n\n  small,\n  .font-small {\n    @include setType(3, $ms-down1);\n  }\n\n  em {\n    font-style: italic;\n  }\n\n  strong {\n    font-weight: bold;\n  }\n\n  blockquote {\n    margin-top: emRhythm(4);\n    margin-bottom: emRhythm(4);\n    margin-left: 0;\n    padding-top: 0;\n    padding-bottom: 0;\n    padding-left: emRhythm(4);\n    border-left: $base-vertical-unit solid lighten(#000, 50%);\n    font-family: $font-serif;\n\n    p {\n      margin-bottom: emRhythm(2);\n    }\n\n    footer {\n      cite {\n        &:before {\n          content: \" â€“ \";\n        }\n      }\n    }\n  }\n\n  pre,\n  code {\n    font-family: $font-mono;\n  }\n\n  time,\n  .time {\n    text-transform: uppercase;\n  }\n\n  ol,\n  ul,\n  dl {\n    margin-top: 0;\n    margin-bottom: emRhythm(4);\n    margin-left: emRhythm(4);\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n\n  ul ul,\n  ol ol,\n  dl dl {\n    margin-left: 0;\n  }\n\n  ul {\n    list-style: disc;\n  }\n\n  ol {\n    list-style: decimal;\n  }\n\n  // [1] https://developer.mozilla.org/en-US/docs/CSS/font-variant\n  abbr {\n    font-variant: small-caps; // [1]\n    font-weight: 600;\n    text-transform: lowercase;\n  }\n\n  // Cursor changed to a question mark when it has a title\n  abbr[title]:hover {\n    cursor: help;\n  }\n\n  // Creates horizontal rules that obey the baseline.\n  // [1] Zero outs the user agent border\n  hr {\n    margin-top: emRhythm(4);\n    margin-bottom: 0;\n    border: none; // [1]\n    border-top-color: $text-color;\n    border-top-style: solid;\n    @include rhythmBorderTop(1px, 4);\n  }\n}\n","// Rubik, Play, Monda, Orbitron, Armata, Muli:700, Maven+Pro, Chakra+petch, Crete+Round\r\n// @import url('https://fonts.googleapis.com/css?family=Titillium+Web');\r\n@import url('https://fonts.googleapis.com/css?family=Julius+Sans+One|Merienda');\r\n// @import url(\"https://fonts.googleapis.com/css?family=Electrolize|Jura:500\");\r\n// Your settings for Typesettings :)\r\n$font-sans: \"Julius Sans One\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n$font-serif: \"Merienda\", Georgia, \"Times New Roman\", serif;\r\n$font-mono: \"Lucida Console\", Monaco, monospace;\r\n$text-color: #000;\r\n$base-vertical-unit: 6px;\r\n$base-line-multi: 4;\r\n$base-font-size: 16px;\r\n$ms-ratio: 1.414;\r\n$paragraph-indent: true;\r\n$paragraph-justify: true;\r\n$load-typesetted: true;\r\n$global-init: false; // By default set to false, loaded with typesetted\r\n\r\n// @import \"vendor/burger\";\r\n// $sass-burger-add-vendor-prefixes: false;\r\n\r\n// .main-nav-icon {\r\n//     @include burger();\r\n// }\r\n\r\n// .mm-toggle.is-open .main-nav-icon {\r\n//     @include burger-to-cross();\r\n// }\r\n\r\n@import \"node_modules/include-media/dist/include-media\";\r\n@import \"node_modules/typesettings/typesettings\"; // Here is the _typesettings.scss partial\r\n@import \"partials/helpers\";\r\n@import \"partials/variables\";\r\n@import \"partials/colors\";\r\n@import \"partials/mixins\";\r\n@import \"partials/nav\";\r\n@import \"partials/base\";\r\n@import \"partials/effects\";\r\n","//==============================================================================\n// Mixin(s)\n//==============================================================================\n// Finally, the tools that you can use throughout your project to set\n// all the wonderful type related stuffs.\n\n// Sets the type in EMs and makes a vertical rhythm unitless line-height that is\n// based on context.\n@mixin setType($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {\n  font-size: $font-size;\n  line-height: unitlessRhythm($lines, $font-size, $silent);\n}\n\n// Creates a vertical rhythm unitless line-height that is based on context\n@mixin setLeading($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {\n  line-height: unitlessRhythm($lines, $font-size, $silent);\n}\n\n// Creates a pixel width border top with padding that is a multiple of the base\n// vertical grid unit. You will need to set border style and color rules.\n@mixin rhythmBorderTop($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size) {\n  border-top-width: $border-width;\n  padding-top: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;\n}\n\n// Creates a pixel width border bottom with padding that is a multiple of the base\n// vertical grid unit. You will need to set border style and color rules.\n@mixin rhythmBorderBottom($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size) {\n  border-bottom-width: $border-width;\n  padding-bottom: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;\n}\n\n// Creates a pixel width border with padding that is a multiple of the base\n// vertical grid unit. You will need to set border style and color rules.\n@mixin rhythmBorder($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size) {\n  border-width: $border-width;\n  padding: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;\n}\n\n// Creates base type baseline overlay and vertical unit overlay.\n// To use on the body tag for example: body { @include debug-vertical-alignment(); } and add class va-debug to the body tag\n@mixin debug-vertical-alignment($opacity: 0.8, $vertical-unit: $base-vertical-unit, $type-base-line-multi: $base-line-multi, $type-size: $base-em-font-size) {\n  position: relative;\n\n  &::before,\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    width: 100%;\n    display: none;\n  }\n\n  &::before {\n    z-index: 10;\n    background-image: -webkit-linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);\n    background-image: linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);\n    background-size: 100% (unitlessRhythm($type-base-line-multi, $type-size) + 0rem);\n  }\n\n  &::after {\n    z-index: 9;\n    background-image: -webkit-linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);\n    background-image: linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);\n    background-size: 100% $vertical-unit;\n  }\n\n  &.va-debug::before,\n  &.va-debug::after {\n    display: block;\n    pointer-events: none;\n  }\n}\n\n@mixin typesettingsInit() {\n  html {\n    font-size: ($base-font-size / 16px) * 100%;\n    -webkit-text-size-adjust: 100%;\n    -ms-text-size-adjust: 100%;\n  }\n\n  body {\n    @include setLeading();\n  }\n}\n","//==============================================================================\n// Internal Variables\n//==============================================================================\n// It's Best not to adjust the internal variables directly.[Note]\n\n// Creates a handy variable for the 1em\n$base-em-font-size: 1em;\n\n// Generates modular scale values in Ems. [Note]If you need more size up and/or down\n// then add more sizes.\n// [1] One step down in the modular scale in EMs\n// [2] One step up in the modular scale in EMs\n$ms-down1: $base-em-font-size / $ms-ratio; // [1]\n$ms-down2: $ms-down1 /$ms-ratio;\n$ms-down3: $ms-down2 / $ms-ratio;\n$ms-down4: $ms-down3 / $ms-ratio;\n$ms-up1: $base-em-font-size * $ms-ratio; // [2]\n$ms-up2: $ms-up1 * $ms-ratio;\n$ms-up3: $ms-up2 * $ms-ratio;\n$ms-up4: $ms-up3 * $ms-ratio;\n$ms-up5: $ms-up4 * $ms-ratio;\n$ms-up6: $ms-up5 * $ms-ratio;\n$ms-up7: $ms-up6 * $ms-ratio;\n$ms-up8: $ms-up7 * $ms-ratio;\n$ms-up9: $ms-up8 * $ms-ratio;\n$ms-up10: $ms-up9 * $ms-ratio;\n\n// Warning text for when an integer is not used in rhythm functions\n$not-integer-txt: ' value breaks vertical rhythm. Use an integer (whole number) for $lines.';\n",".mw-100 {\r\n    max-width: 100%;\r\n}\r\n\r\n.mh-100v {\r\n    min-height: 100vh;\r\n}\r\n\r\n.ov-h {\r\n    overflow: hidden;\r\n}\r\n\r\n.fz12 {\r\n    font-size: 12px;\r\n}\r\n\r\n.btn {\r\n    text-decoration: none;\r\n    padding: .5em;\r\n    transition: opacity .3s;\r\n    &:hover {\r\n        opacity: 0.7;\r\n    }\r\n}\r\n\r\n.flex-jcc {\r\n    justify-content: center;\r\n}\r\n\r\n.flex-jcsa {\r\n    justify-content: space-around;\r\n}\r\n\r\n.flex-jcsb {\r\n    justify-content: space-between;\r\n}\r\n\r\n.d-center {\r\n    margin: 0 auto;\r\n}\r\n\r\n// should create mixins for m-x. mh-x, h-x and w-x and also z-x\r\n\r\n.mw-1200 {\r\n    max-width: 1200px;\r\n}\r\n\r\n.h-300 {\r\n    height: 300px;\r\n}\r\n\r\n.h-400 {\r\n    height: 400px;\r\n}\r\n\r\n.z-0 {\r\n    z-index: 0;\r\n}\r\n\r\n.z-1 {\r\n    z-index: 10;\r\n}\r\n\r\n.z-2 {\r\n    z-index: 20;\r\n}\r\n\r\n.z-maz {\r\n    z-index: 9999;\r\n}\r\n\r\n//  angled edges\r\n.rot-1 {\r\n    transform: rotate(0.3deg);\r\n}\r\n\r\n.revrot-1 {\r\n    transform: rotate(-0.3deg);\r\n}\r\n\r\n.clip-1 {\r\n    clip-path: polygon(0 1%, 100% 6%, 100% 97%, 0 86%);\r\n}\r\n\r\n.clip-2 {\r\n    clip-path: polygon(0 1%, 100% 15%, 100% 97%, 0 83%);\r\n}\r\n\r\n.columnize {\r\n    // columns: 240px 2;\r\n    columns: 320px;\r\n    @include media('>desktop') {\r\n        columns: 3;\r\n    }\r\n}\r\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `â‰¥`, `â‰¤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', 'â‰¥', 'â‰¤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', 'â‰¤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","// $color1: rgba(231, 32, 32, 1);\r\n// $color2: rgba(255, 255, 255, 1);\r\n// $color3: rgba(40, 40, 40, 1);\r\n// $color4: rgba(125, 20, 27, 1);\r\n// $color5: rgba(0, 0, 0, 1);\r\n\r\n$color1: rgba(239, 71, 111, 1);\r\n$color2: rgba(255, 209, 102, 1);\r\n$color3: rgba(6, 214, 160, 1);\r\n$color4: rgba(17, 138, 178, 1);\r\n$color5: rgba(7, 59, 76, 1);\r\n\r\n:root {\r\n  --primary-color: rgba(17, 138, 178, 1);\r\n  --bg-primary: rgba(255, 209, 102, 1);\r\n  --nav-bg-color: rgba(255, 209, 102, 1);\r\n  --bg-dark: rgba(7, 59, 76, 1);\r\n  --bg-light: rgba(255, 209, 102, 1);\r\n  --text-primary: #e4c;\r\n  --text-dark: #{$color5};\r\n  --text-light: #fff;\r\n  --link-color: rgba(125, 20, 27, 1);\r\n  --font-stack: \"Monda\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", \"sans-serif\";\r\n  --font-xs: 0.75 rem;\r\n  --font-sm: 1 rem;\r\n  --font-md: 1.25 rem;\r\n  --font-lg: 1.5 rem;\r\n  --bm-top: 30px;\r\n  --bm-left: 10px;\r\n}\r\n",".theme {\r\n    color: var(--text-light);\r\n    background-color: var(--bg-dark);\r\n}\r\n\r\n.theme-inverse {\r\n    color: var(--text-dark);\r\n    background-color: var(--bg-light);\r\n}\r\n\r\n.theme-bw {\r\n    color: #fff;\r\n    background-color: #000;\r\n}\r\n\r\n.theme-bw-inverse {\r\n    color: #000;\r\n    background-color: #fff;\r\n}\r\n\r\n.theme-2 {\r\n    color: #000;\r\n}","nav.main-nav{\r\n    // background-color: white;\r\n    background-color: var(--nav-bg-color);\r\n    .mm-toggle{\r\n      border: 0;\r\n      background-color: transparent;\r\n      cursor: pointer;\r\n      @include media(\">tablet\"){\r\n        // visibility: hidden;\r\n        display: none;\r\n      }\r\n    }\r\n    ul.nav-container{\r\n        list-style-type: none; //bad practice decouple it as seperate list-reset class\r\n        text-transform: uppercase;\r\n        // height: 0;\r\n        overflow: hidden;\r\n        margin: 0;\r\n        transition: height .7s linear;\r\n        @include media(\">tablet\"){\r\n          height: auto;\r\n          overflow: visible;\r\n\r\n          display: flex;\r\n          flex-wrap: wrap;\r\n        }\r\n\r\n      li.nav-item{\r\n        flex: 1 0 60px;\r\n        height: 40px;\r\n        display: flex;\r\n        @include media(\">tablet\"){\r\n          max-width: 120px;\r\n        }\r\n        align-items: center;\r\n        transition: background .3s linear;\r\n        &:hover{\r\n          background-color: var(--primary-color);\r\n        }\r\n        a{\r\n           text-decoration: none; //bad practice decouple it as seperate nav-link class\r\n           padding: 4px 10px;\r\n           width: 100%;\r\n        }\r\n      }\r\n    }\r\n}","%visuallyhidden {\r\n  margin: -1px;\r\n  padding: 0;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0 0 0 0);\r\n  clip: rect(0, 0, 0, 0);\r\n  position: absolute;\r\n}  // can't work across media queries, placeholders are used to reduce duplicate css codes\r\n\r\n@mixin vishidden {\r\n  margin: -1px;\r\n  padding: 0;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0 0 0 0);\r\n  clip: rect(0, 0, 0, 0);\r\n  position: absolute;\r\n}\r\n\r\n%clearfix {\r\n  *zoom: 1;\r\n  &:before, &:after {\r\n    content: \" \";\r\n    display: table;\r\n  }\r\n  &:after {\r\n    clear: both;\r\n  }\r\n}\r\n\r\n\r\n@mixin flexitemsplitter($col, $gutter: 0px, $bpn: '') { // dependency of flecgrid()\r\n    @for $i from 1 through $col {\r\n        .col-#{$bpn}#{$i} {\r\n            // flex: 1 1 (100/$i)* 1% ;\r\n            // flex-basis: (100/$i)* 1% ;\r\n            max-width: (100/$i)* 1% ;\r\n            margin-right: $gutter;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin spacing($class, $prop, $iteration) {\r\n  @for $i from 1 through $iteration {\r\n    .#{$class}#{$i} {\r\n        #{$prop}: 0.25*$i* 1rem;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@mixin minwidthbp($bp) {\r\n    @media screen and (min-width: #{$bp}) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin maxwidthbp($bp) {\r\n    @media screen and (max-width: #{$bp}) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin hidebp($breakpoints) {\r\n    @each $bp, $val in $breakpoints {\r\n        @if map-has-key($breakpoints, $bp) {\r\n            @include minwidthbp(#{map-get($breakpoints, $bp)}) {\r\n                .#{$bp}-hide {\r\n                    // visibility: hidden;\r\n\r\n                    // position: absolute;\r\n                    // top: -9999px;\r\n                    // left: -9999px;\r\n\r\n                    // position:absolute;\r\n                    // clip:rect(0 0 0 0);\r\n\r\n                    // @extend %visuallyhidden;\r\n                    @include vishidden;\r\n                }\r\n            }\r\n        }\r\n\r\n        @else {\r\n            @warn \"Unfortunately, no value could be retrieved from `#{$bp}`. \"\r\n                + \"Please make sure it is defined in `$breakpoints` map.\";\r\n        }\r\n    }\r\n}\r\n\r\n@mixin flexgrid($breakpoints, $col, $gutter: 0px) {\r\n    @each $bp, $val in $breakpoints {\r\n        @if map-has-key($breakpoints, $bp) {\r\n            @include minwidthbp(#{map-get($breakpoints, $bp)}) {\r\n                @include flexitemsplitter($col, $gutter, $bp) ;\r\n            }\r\n        }\r\n\r\n        @else {\r\n            @warn \"Unfortunately, no value could be retrieved from `#{$bp}`. \"\r\n                + \"Please make sure it is defined in `$breakpoints` map.\";\r\n        }\r\n    }\r\n}","@include spacing('m', 'margin', 3);\r\n@include spacing('mt', 'margin-top', 3);\r\n@include spacing('mb', 'margin-bottom', 3);\r\n@include spacing('ml', 'margin-left', 3);\r\n@include spacing('mr', 'margin-right', 3);\r\n@include spacing('p', 'padding', 3);\r\n@include spacing('pt', 'padding-top', 3);\r\n@include spacing('pb', 'padding-bottom', 3);\r\n@include spacing('pl', 'padding-left', 3);\r\n@include spacing('pr', 'padding-right', 3);\r\n\r\n$brkpoints : (\r\n    sm: 320px,\r\n    md: 768px,\r\n    lg: 1024px\r\n);\r\n\r\n@include hidebp($brkpoints);\r\n@include flexgrid($brkpoints, 4, 0.5em);\r\n\r\n// *, *:*, *::* {\r\n//   box-sizing: border-box;\r\n// }\r\n\r\n// overflow-wrap, word-wrap, word-break, hyphens\r\n\r\n.c-fluid,\r\n.c {\r\n  max-width: 1280px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  padding: 1em .5em;\r\n}\r\n\r\n.c-fluid {\r\n  padding-right: 2rem;\r\n  padding-left: 2rem;\r\n}\r\n\r\n.row {\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex: 0 1 auto;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  // margin-right: -0.5rem;\r\n  // margin-left: -0.5rem;\r\n}\r\n\r\n[class|=col] {\r\n  padding: 1em;\r\n}\r\n\r\n.row.reverse {\r\n  flex-direction: row-reverse;\r\n}\r\n\r\n.col.reverse {\r\n  flex-direction: column-reverse;\r\n}\r\n\r\n.card {\r\n  max-width: 300px;\r\n  box-shadow: 0 10px 6px -6px #777;\r\n  @include media(\">tablet\"){\r\n    max-width: 400px;\r\n  }\r\n  .card-body {\r\n    padding: 1em;\r\n  }\r\n}\r\n\r\nbody {\r\n  background-color: var(--primary-color);\r\n  // background-image: radial-gradient(white, var(--primary-color));\r\n  background-image: radial-gradient(#dedede, lighten($color2, 10%));\r\n  // font-family: 'Monda', sans-serif;\r\n  transition: opacity 0.3s linear;\r\n}\r\n\r\n// .banner-container {\r\n//   max-height: 400px;\r\n//   overflow: hidden;\r\n//   position: relative;\r\n//   .banner-overlay{\r\n//     position: absolute;\r\n//     color: white;\r\n//     // can width height inherit warranty the same behavior in all browsers\r\n//     width: 100%;\r\n//     height: 100%;\r\n//     background: rgba(0, 0, 0, 0.4);\r\n//   }\r\n// }\r\n\r\n.herobanner-container {\r\n  .herobanner {\r\n    padding: 10px;\r\n    text-align: center;\r\n    @include media(\">tablet\") {\r\n      font-size: 1.8em;\r\n      padding: 2em .5em;\r\n    }\r\n  }\r\n}\r\n\r\n#proverbs p {\r\n  text-indent: -1em;\r\n  padding: .75em 3em;\r\n  // padding-left: 3em;\r\n  line-height: 2;\r\n  font-size: 1.1em;\r\n}\r\n\r\nfooter {\r\n    background-color: var(--bg-dark);\r\n    color: var(--bg-light);\r\n}\r\n\r\n@include media(\">desktop\") {\r\n  body{\r\n\r\n  }\r\n}\r\n\r\n// * {\r\n//   background: #000 !important;\r\n//   color: #fff !important;\r\n//   outline: 1px solid gray;\r\n// }\r\n","// toggle\r\n\r\n.h-hide {\r\n  height: 0 !important;\r\n}\r\n\r\n.h-show {\r\n  height: auto !important;\r\n}\r\n"]}